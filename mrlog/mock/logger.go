// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mock_mrlog is a generated GoMock package.
package mock_mrlog

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	mrlog "github.com/mondegor/go-webcore/mrlog"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug))
}

// Error mocks base method.
func (m *MockLogger) Error() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error))
}

// Fatal mocks base method.
func (m *MockLogger) Fatal() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatal")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal))
}

// Info mocks base method.
func (m *MockLogger) Info() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info))
}

// Level mocks base method.
func (m *MockLogger) Level() mrlog.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(mrlog.Level)
	return ret0
}

// Level indicates an expected call of Level.
func (mr *MockLoggerMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockLogger)(nil).Level))
}

// Panic mocks base method.
func (m *MockLogger) Panic() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Panic")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic))
}

// Printf mocks base method.
func (m *MockLogger) Printf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLoggerMockRecorder) Printf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}

// Trace mocks base method.
func (m *MockLogger) Trace() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLogger)(nil).Trace))
}

// Warn mocks base method.
func (m *MockLogger) Warn() mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn))
}

// With mocks base method.
func (m *MockLogger) With() mrlog.LoggerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With")
	ret0, _ := ret[0].(mrlog.LoggerContext)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With))
}

// WithContext mocks base method.
func (m *MockLogger) WithContext(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockLoggerMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockLogger)(nil).WithContext), ctx)
}

// MockLoggerContext is a mock of LoggerContext interface.
type MockLoggerContext struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerContextMockRecorder
}

// MockLoggerContextMockRecorder is the mock recorder for MockLoggerContext.
type MockLoggerContextMockRecorder struct {
	mock *MockLoggerContext
}

// NewMockLoggerContext creates a new mock instance.
func NewMockLoggerContext(ctrl *gomock.Controller) *MockLoggerContext {
	mock := &MockLoggerContext{ctrl: ctrl}
	mock.recorder = &MockLoggerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerContext) EXPECT() *MockLoggerContextMockRecorder {
	return m.recorder
}

// Any mocks base method.
func (m *MockLoggerContext) Any(key string, value any) mrlog.LoggerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Any", key, value)
	ret0, _ := ret[0].(mrlog.LoggerContext)
	return ret0
}

// Any indicates an expected call of Any.
func (mr *MockLoggerContextMockRecorder) Any(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockLoggerContext)(nil).Any), key, value)
}

// Bytes mocks base method.
func (m *MockLoggerContext) Bytes(key string, value []byte) mrlog.LoggerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes", key, value)
	ret0, _ := ret[0].(mrlog.LoggerContext)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockLoggerContextMockRecorder) Bytes(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockLoggerContext)(nil).Bytes), key, value)
}

// Int mocks base method.
func (m *MockLoggerContext) Int(key string, value int) mrlog.LoggerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", key, value)
	ret0, _ := ret[0].(mrlog.LoggerContext)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockLoggerContextMockRecorder) Int(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockLoggerContext)(nil).Int), key, value)
}

// Int64 mocks base method.
func (m *MockLoggerContext) Int64(key string, value int64) mrlog.LoggerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64", key, value)
	ret0, _ := ret[0].(mrlog.LoggerContext)
	return ret0
}

// Int64 indicates an expected call of Int64.
func (mr *MockLoggerContextMockRecorder) Int64(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockLoggerContext)(nil).Int64), key, value)
}

// Logger mocks base method.
func (m *MockLoggerContext) Logger() mrlog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(mrlog.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockLoggerContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockLoggerContext)(nil).Logger))
}

// Str mocks base method.
func (m *MockLoggerContext) Str(key, value string) mrlog.LoggerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Str", key, value)
	ret0, _ := ret[0].(mrlog.LoggerContext)
	return ret0
}

// Str indicates an expected call of Str.
func (mr *MockLoggerContextMockRecorder) Str(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Str", reflect.TypeOf((*MockLoggerContext)(nil).Str), key, value)
}

// MockLoggerEvent is a mock of LoggerEvent interface.
type MockLoggerEvent struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerEventMockRecorder
}

// MockLoggerEventMockRecorder is the mock recorder for MockLoggerEvent.
type MockLoggerEventMockRecorder struct {
	mock *MockLoggerEvent
}

// NewMockLoggerEvent creates a new mock instance.
func NewMockLoggerEvent(ctrl *gomock.Controller) *MockLoggerEvent {
	mock := &MockLoggerEvent{ctrl: ctrl}
	mock.recorder = &MockLoggerEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerEvent) EXPECT() *MockLoggerEventMockRecorder {
	return m.recorder
}

// Any mocks base method.
func (m *MockLoggerEvent) Any(key string, value any) mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Any", key, value)
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Any indicates an expected call of Any.
func (mr *MockLoggerEventMockRecorder) Any(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockLoggerEvent)(nil).Any), key, value)
}

// Bytes mocks base method.
func (m *MockLoggerEvent) Bytes(key string, value []byte) mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes", key, value)
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockLoggerEventMockRecorder) Bytes(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockLoggerEvent)(nil).Bytes), key, value)
}

// Err mocks base method.
func (m *MockLoggerEvent) Err(err error) mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockLoggerEventMockRecorder) Err(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockLoggerEvent)(nil).Err), err)
}

// Int mocks base method.
func (m *MockLoggerEvent) Int(key string, value int) mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", key, value)
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockLoggerEventMockRecorder) Int(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockLoggerEvent)(nil).Int), key, value)
}

// Int64 mocks base method.
func (m *MockLoggerEvent) Int64(key string, value int64) mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64", key, value)
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Int64 indicates an expected call of Int64.
func (mr *MockLoggerEventMockRecorder) Int64(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockLoggerEvent)(nil).Int64), key, value)
}

// Msg mocks base method.
func (m *MockLoggerEvent) Msg(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Msg", message)
}

// Msg indicates an expected call of Msg.
func (mr *MockLoggerEventMockRecorder) Msg(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockLoggerEvent)(nil).Msg), message)
}

// MsgFunc mocks base method.
func (m *MockLoggerEvent) MsgFunc(createMsg func() string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MsgFunc", createMsg)
}

// MsgFunc indicates an expected call of MsgFunc.
func (mr *MockLoggerEventMockRecorder) MsgFunc(createMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgFunc", reflect.TypeOf((*MockLoggerEvent)(nil).MsgFunc), createMsg)
}

// Msgf mocks base method.
func (m *MockLoggerEvent) Msgf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Msgf", varargs...)
}

// Msgf indicates an expected call of Msgf.
func (mr *MockLoggerEventMockRecorder) Msgf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msgf", reflect.TypeOf((*MockLoggerEvent)(nil).Msgf), varargs...)
}

// Send mocks base method.
func (m *MockLoggerEvent) Send() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send")
}

// Send indicates an expected call of Send.
func (mr *MockLoggerEventMockRecorder) Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLoggerEvent)(nil).Send))
}

// Str mocks base method.
func (m *MockLoggerEvent) Str(key, value string) mrlog.LoggerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Str", key, value)
	ret0, _ := ret[0].(mrlog.LoggerEvent)
	return ret0
}

// Str indicates an expected call of Str.
func (mr *MockLoggerEventMockRecorder) Str(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Str", reflect.TypeOf((*MockLoggerEvent)(nil).Str), key, value)
}
